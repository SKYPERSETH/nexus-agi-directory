[
  {
    "id": "agi://service/openai/chat-completions:v1",
    "name": "OpenAI Chat Completions",
    "endpoint": "https://api.openai.com/v1/chat/completions",
    "capabilities": ["chat", "stream", "function_calling"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "application/json", "OpenAI-Beta": "assistants=v2 (optional)"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/api-reference/chat",
    "status": "stable",
    "reputation": {"ecosystem": "widely adopted"},
    "notes": "Use 'response_format' for JSON; tool calls via 'tools'."
  },
  {
    "id": "agi://service/openai/responses:v1",
    "name": "OpenAI Responses API",
    "endpoint": "https://api.openai.com/v1/responses",
    "capabilities": ["chat", "tools", "structured_outputs", "multimodal", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/api-reference/responses",
    "status": "stable",
    "reputation": {"ecosystem": "broad"},
    "notes": "Unified endpoint supporting tool calls and JSON schema outputs."
  },
  {
    "id": "agi://service/anthropic/messages:v1",
    "name": "Anthropic Claude Messages",
    "endpoint": "https://api.anthropic.com/v1/messages",
    "capabilities": ["chat", "tool_use", "vision", "stream"],
    "auth": {"method": "bearer", "header": "x-api-key: ${ANTHROPIC_API_KEY}"},
    "headers": {"anthropic-version": "2023-06-01", "Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan; enterprise tiers available"},
    "docs": "https://docs.anthropic.com/claude/reference/messages_post",
    "status": "stable",
    "reputation": {"quality": "high reasoning"},
    "notes": "Tool use via 'tool_use' content blocks and 'tools'."
  },
  {
    "id": "agi://service/google/vertex-gemini:v1",
    "name": "Google Vertex AI (Gemini)",
    "endpoint": "https://generativelanguage.googleapis.com",
    "capabilities": ["chat", "multimodal", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GOOGLE_ACCESS_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "project quota"},
    "docs": "https://ai.google.dev/api",
    "status": "stable",
    "reputation": {"ecosystem": "GCP-integrated"},
    "notes": "Vertex-hosted endpoints are region/scoped; set location."
  },
  {
    "id": "agi://service/azure/openai-chat:v1",
    "name": "Azure OpenAI (Chat)",
    "endpoint": "https://{resource-name}.openai.azure.com/openai/deployments/{deployment}/chat/completions?api-version={api-version}",
    "capabilities": ["chat", "stream", "function_calling"],
    "auth": {"method": "bearer", "header": "api-key: ${AZURE_OPENAI_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by SKU; per-deployment TPS"},
    "docs": "https://learn.microsoft.com/azure/ai-services/openai/reference",
    "status": "stable",
    "reputation": {"trust": "enterprise, regional data controls"},
    "notes": "Model selection via Azure 'deployment' not 'model' param."
  },
  {
    "id": "agi://service/aws/bedrock-converse:v1",
    "name": "AWS Bedrock Converse",
    "endpoint": "https://bedrock-runtime.{region}.amazonaws.com/model/{modelId}/converse",
    "capabilities": ["chat", "tools", "guardrails", "stream"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by account quota"},
    "docs": "https://docs.aws.amazon.com/bedrock/latest/userguide/conversation-inference.html",
    "status": "stable",
    "reputation": {"ecosystem": "AWS-integrated"},
    "notes": "Model picked via path 'modelId'; supports multiple providers."
  },
  {
    "id": "agi://service/cohere/chat:v1",
    "name": "Cohere Chat",
    "endpoint": "https://api.cohere.ai/v1/chat",
    "capabilities": ["chat", "search_grounding", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${COHERE_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://docs.cohere.com/reference/chat",
    "status": "stable",
    "reputation": {"strength": "RAG features"},
    "notes": "Enable web/RAG via connectors and search options."
  },
  {
    "id": "agi://service/mistral/chat:v1",
    "name": "Mistral Chat",
    "endpoint": "https://api.mistral.ai/v1/chat/completions",
    "capabilities": ["chat", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${MISTRAL_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://docs.mistral.ai/api/#tag/Chat",
    "status": "stable",
    "reputation": {},
    "notes": "Follows OpenAI-style chat completions schema."
  },
  {
    "id": "agi://service/meta/llama-inference:v1",
    "name": "Meta Llama Inference (Hosted)",
    "endpoint": "https://api.together.xyz/v1",
    "capabilities": ["chat", "summarize"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${TOGETHER_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by host plan"},
    "docs": "https://www.together.ai/docs",
    "status": "hosted-via-third-parties",
    "reputation": {},
    "notes": "Meta does not run a single public Llama API; use hosts (Together, Fireworks, Groq, etc.)."
  },
  {
    "id": "agi://service/together/chat-completions:v1",
    "name": "Together Inference (Chat)",
    "endpoint": "https://api.together.xyz/v1/chat/completions",
    "capabilities": ["chat", "multi-model", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${TOGETHER_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://www.together.ai/docs/inference/chat-completions",
    "status": "stable",
    "reputation": {},
    "notes": "Supports many open models; pass 'model'."
  },
  {
    "id": "agi://service/perplexity/chat:v1",
    "name": "Perplexity API (Chat)",
    "endpoint": "https://api.perplexity.ai",
    "capabilities": ["chat", "search_answering", "web_grounding"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${PPLX_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://docs.perplexity.ai/",
    "status": "beta",
    "reputation": {},
    "notes": "Set 'search_focus'/'web' flags depending on docs version."
  },
  {
    "id": "agi://service/perplexity/comet:v1",
    "name": "Perplexity Comet (Browser Mode)",
    "endpoint": "https://api.perplexity.ai",
    "capabilities": ["search", "browse", "retrieval"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${PPLX_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.perplexity.ai/",
    "status": "experimental",
    "reputation": {},
    "notes": "Browser/comet mode descriptor evolving; verify params."
  },
  {
    "id": "agi://service/replicate/llm-chat:v1",
    "name": "Replicate (Hosted LLMs)",
    "endpoint": "https://api.replicate.com/v1",
    "capabilities": ["inference", "async_jobs", "webhooks"],
    "auth": {"method": "bearer", "header": "Authorization: Token ${REPLICATE_API_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://replicate.com/docs/reference/http",
    "status": "stable",
    "reputation": {},
    "notes": "Chat via model-specific predictors; polling or webhooks."
  },
  {
    "id": "agi://service/huggingface/inference-endpoints:v1",
    "name": "Hugging Face Inference Endpoints",
    "endpoint": "https://api.endpoints.huggingface.cloud",
    "capabilities": ["custom-models", "scaling", "private_endpoints"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${HF_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by endpoint config"},
    "docs": "https://huggingface.co/docs/inference-endpoints/index",
    "status": "stable",
    "reputation": {},
    "notes": "Provisioned per-model HTTPS endpoints."
  },
  {
    "id": "agi://service/ibm/watsonx-ai-chat:v1",
    "name": "IBM watsonx.ai (LLM Chat)",
    "endpoint": "https://us-south.ml.cloud.ibm.com",
    "capabilities": ["chat", "prompt_tuning"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${IBM_IAM_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://cloud.ibm.com/apidocs/watsonx-ai",
    "status": "stable",
    "reputation": {},
    "notes": "Region and project scoping required."
  },
  {
    "id": "agi://service/nvidia/nim-llm:v1",
    "name": "NVIDIA NIM (LLM)",
    "endpoint": "https://api.nvcf.nvidia.com",
    "capabilities": ["chat", "inference"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${NVIDIA_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by account"},
    "docs": "https://docs.nvidia.com/nim/",
    "status": "stable",
    "reputation": {},
    "notes": "Deploy via NVIDIA API Catalog (NVCF)."
  },
  {
    "id": "agi://service/ai21/jamba-chat:v1",
    "name": "AI21 Jamba Chat",
    "endpoint": "https://api.ai21.com/studio/v1/chat",
    "capabilities": ["chat"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${AI21_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://docs.ai21.com/",
    "status": "stable",
    "reputation": {},
    "notes": "Studio API; model names per docs."
  },
  {
    "id": "agi://service/alephalpha/luminous-chat:v1",
    "name": "Aleph Alpha Luminous (Chat)",
    "endpoint": "https://api.aleph-alpha.com",
    "capabilities": ["chat", "multilingual"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${ALEPHALPHA_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://docs.aleph-alpha.com/",
    "status": "stable",
    "reputation": {},
    "notes": "Supports image inputs on some tiers."
  },
  {
    "id": "agi://service/openrouter/chat:v1",
    "name": "OpenRouter (Multi-Provider Chat)",
    "endpoint": "https://openrouter.ai/api/v1/chat/completions",
    "capabilities": ["chat", "router", "pricing_visibility", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENROUTER_API_KEY}"},
    "headers": {"Content-Type": "application/json", "HTTP-Referer": "${APP_URL}", "X-Title": "${APP_NAME}"},
    "models_param": "model",
    "limits": {"rate": "by plan"},
    "docs": "https://openrouter.ai/docs",
    "status": "stable",
    "reputation": {},
    "notes": "Supports many provider-backed models; pass referer/title."
  },
  {
    "id": "agi://service/lmstudio/local-server:v1",
    "name": "LM Studio (Local Server)",
    "endpoint": "http://localhost:1234/v1/chat/completions",
    "capabilities": ["chat", "local", "offline", "stream"],
    "auth": {"method": "none"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "local"},
    "docs": "https://lmstudio.ai/docs/local-server",
    "status": "stable",
    "reputation": {},
    "notes": "OpenAI-compatible local server."
  },
  {
    "id": "agi://service/ollama/local-server:v1",
    "name": "Ollama (Local Models)",
    "endpoint": "http://localhost:11434/api/chat",
    "capabilities": ["chat", "local", "offline", "stream"],
    "auth": {"method": "none"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "local"},
    "docs": "https://github.com/ollama/ollama/blob/main/docs/api.md#chat",
    "status": "stable",
    "reputation": {},
    "notes": "Set 'model' to a pulled local model (e.g., llama3)."
  },
  {
    "id": "agi://service/perplexity/search:v1",
    "name": "Perplexity Search",
    "endpoint": "https://api.perplexity.ai",
    "capabilities": ["search", "retrieval", "qa"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${PPLX_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.perplexity.ai/",
    "status": "beta",
    "reputation": {},
    "notes": "Web-grounded answers; params vary by version."
  },
  {
    "id": "agi://service/serpapi/google-search:v1",
    "name": "SerpAPI Google Search",
    "endpoint": "https://serpapi.com/search",
    "capabilities": ["search", "google", "results"],
    "auth": {"method": "key", "query": "api_key=${SERPAPI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://serpapi.com/search-api",
    "status": "stable",
    "reputation": {},
    "notes": "Engine param controls source (google, bing, etc.)."
  },
  {
    "id": "agi://service/brave/search:v1",
    "name": "Brave Search API",
    "endpoint": "https://api.search.brave.com/res/v1",
    "capabilities": ["search", "private", "web"],
    "auth": {"method": "token", "header": "X-Subscription-Token: ${BRAVE_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://api.search.brave.com/app/documentation/",
    "status": "stable",
    "reputation": {},
    "notes": "Endpoints for web, news, images; choose path accordingly."
  },
  {
    "id": "agi://service/microsoft/bing-search:v1",
    "name": "Bing Search API",
    "endpoint": "https://api.bing.microsoft.com/v7.0/search",
    "capabilities": ["search", "retrieval"],
    "auth": {"method": "key", "header": "Ocp-Apim-Subscription-Key: ${BING_SEARCH_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by Azure tier"},
    "docs": "https://learn.microsoft.com/bing/search-apis/bing-web-search/overview",
    "status": "stable",
    "reputation": {},
    "notes": "Separate endpoints for images/news/videos available."
  },
  {
    "id": "agi://service/duckduckgo/instant-answer:v1",
    "name": "DuckDuckGo Instant Answer",
    "endpoint": "https://api.duckduckgo.com",
    "capabilities": ["search", "qa"],
    "auth": {"method": "none"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "public"},
    "docs": "https://api.duckduckgo.com/api",
    "status": "stable",
    "reputation": {},
    "notes": "Use params: q, format=json, no_html=1, no_redirect=1."
  },
  {
    "id": "agi://service/wikipedia/api:v1",
    "name": "Wikipedia API",
    "endpoint": "https://en.wikipedia.org/w/api.php",
    "capabilities": ["retrieval", "knowledge"],
    "auth": {"method": "none"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "public with etiquette"},
    "docs": "https://www.mediawiki.org/wiki/API:Main_page",
    "status": "stable",
    "reputation": {},
    "notes": "Respect User-Agent; throttle politely."
  },
  {
    "id": "agi://service/arxiv/api:v1",
    "name": "arXiv API",
    "endpoint": "http://export.arxiv.org/api/query",
    "capabilities": ["papers", "retrieval"],
    "auth": {"method": "none"},
    "headers": {"Accept": "application/atom+xml"},
    "models_param": null,
    "limits": {"rate": "public with etiquette"},
    "docs": "https://info.arxiv.org/help/api/index.html",
    "status": "stable",
    "reputation": {},
    "notes": "Atom feed; use start/max_results for paging."
  },
  {
    "id": "agi://service/pubmed/api:v1",
    "name": "PubMed API (NCBI E-Utilities)",
    "endpoint": "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/",
    "capabilities": ["medical", "retrieval"],
    "auth": {"method": "none"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "~3 r/s public; higher with api_key"},
    "docs": "https://www.ncbi.nlm.nih.gov/books/NBK25501/",
    "status": "stable",
    "reputation": {},
    "notes": "ESearch+EFetch+ESummary compose workflows."
  },
  {
    "id": "agi://service/crossref/api:v1",
    "name": "Crossref Metadata API",
    "endpoint": "https://api.crossref.org",
    "capabilities": ["scholarly", "metadata"],
    "auth": {"method": "none"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "polite pool 50 r/s with mailto"},
    "docs": "https://www.crossref.org/documentation/retrieve-metadata/rest-api/",
    "status": "stable",
    "reputation": {},
    "notes": "Set 'mailto' in User-Agent for higher limits."
  },
  {
    "id": "agi://service/semanticscholar/api:v1",
    "name": "Semantic Scholar API",
    "endpoint": "https://api.semanticscholar.org/graph/v1",
    "capabilities": ["papers", "citation-graph"],
    "auth": {"method": "key", "header": "x-api-key: ${S2_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://api.semanticscholar.org/api-docs/graph",
    "status": "stable",
    "reputation": {},
    "notes": "Graph endpoints for authors/papers/citations."
  },
  {
    "id": "agi://service/elsevier/scopus:v1",
    "name": "Elsevier Scopus API",
    "endpoint": "https://api.elsevier.com/content/search/scopus",
    "capabilities": ["academic", "retrieval"],
    "auth": {"method": "key", "header": "X-ELS-APIKey: ${ELSEVIER_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by subscription"},
    "docs": "https://dev.elsevier.com/sc_apis.html",
    "status": "stable",
    "reputation": {},
    "notes": "Affiliation with institutional subscription often required."
  },
  {
    "id": "agi://service/newsapi/news:v1",
    "name": "NewsAPI",
    "endpoint": "https://newsapi.org/v2/everything",
    "capabilities": ["news", "retrieval"],
    "auth": {"method": "key", "header": "X-Api-Key: ${NEWSAPI_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://newsapi.org/docs/endpoints/everything",
    "status": "stable",
    "reputation": {},
    "notes": "Source/domain filtering available; ToS restricts caching."
  },
  {
    "id": "agi://service/guardian/open-platform:v1",
    "name": "The Guardian Open Platform",
    "endpoint": "https://content.guardianapis.com",
    "capabilities": ["news", "retrieval"],
    "auth": {"method": "key", "query": "api-key=${GUARDIAN_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by key tier"},
    "docs": "https://open-platform.theguardian.com/documentation/",
    "status": "stable",
    "reputation": {},
    "notes": "Use 'show-fields' to enrich responses."
  },
  {
    "id": "agi://service/nyt/articles:v1",
    "name": "New York Times Article Search",
    "endpoint": "https://api.nytimes.com/svc/search/v2/articlesearch.json",
    "capabilities": ["news", "retrieval"],
    "auth": {"method": "key", "query": "api-key=${NYT_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by key tier"},
    "docs": "https://developer.nytimes.com/docs/articlesearch-product/1/overview",
    "status": "stable",
    "reputation": {},
    "notes": "Different NYT endpoints exist for Top Stories/TimesWire."
  },
  {
    "id": "agi://service/tavily/search:v1",
    "name": "Tavily Search API",
    "endpoint": "https://api.tavily.com/search",
    "capabilities": ["search", "retrieval"],
    "auth": {"method": "key", "header": "X-API-Key: ${TAVILY_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.tavily.com",
    "status": "stable",
    "reputation": {},
    "notes": "Modern RAG-focused web search."
  },
  {
    "id": "agi://service/pinecone/retrieval:v1",
    "name": "Pinecone Vector Search",
    "endpoint": "https://{index-name}-{project-id}.svc.{region}.pinecone.io/query",
    "capabilities": ["vector-search", "retrieval"],
    "auth": {"method": "key", "header": "Api-Key: ${PINECONE_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.pinecone.io/reference/query",
    "status": "stable",
    "reputation": {},
    "notes": "Namespace and topK required for most queries."
  },
  {
    "id": "agi://service/weaviate/search:v1",
    "name": "Weaviate Search",
    "endpoint": "https://{cluster-id}.weaviate.network/v1/graphql",
    "capabilities": ["vector-search", "retrieval"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${WEAVIATE_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://weaviate.io/developers/weaviate/api/graphql",
    "status": "stable",
    "reputation": {},
    "notes": "GraphQL filter syntax; hybrid search available."
  },
  {
    "id": "agi://service/qdrant/search:v1",
    "name": "Qdrant Search",
    "endpoint": "https://{cluster-id}.qdrant.io/v1",
    "capabilities": ["vector-search", "retrieval"],
    "auth": {"method": "key", "header": "api-key: ${QDRANT_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://qdrant.tech/documentation/",
    "status": "stable",
    "reputation": {},
    "notes": "Collections and payload filters control retrieval."
  },
  {
    "id": "agi://service/milvus/search:v1",
    "name": "Milvus Vector DB",
    "endpoint": "https://{host}/v1",
    "capabilities": ["vector-search", "retrieval"],
    "auth": {"method": "bearer", "optional": true},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by deployment"},
    "docs": "https://milvus.io/docs",
    "status": "varies",
    "reputation": {},
    "notes": "Interfaces differ across OSS, Zilliz Cloud, REST gateways."
  },
  {
    "id": "agi://service/openai/vision:v1",
    "name": "OpenAI Vision (GPT-4o, GPT-4.1, GPT-4v)",
    "endpoint": "https://api.openai.com/v1/chat/completions",
    "capabilities": ["vision", "multimodal", "ocr", "chat", "stream"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/guides/vision",
    "status": "stable",
    "reputation": {},
    "notes": "Send images via messages[].content.image_url or input_image in Responses API."
  },
  {
    "id": "agi://service/openai/tts:v1",
    "name": "OpenAI Text-to-Speech",
    "endpoint": "https://api.openai.com/v1/audio/speech",
    "capabilities": ["tts", "audio"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/api-reference/audio/createSpeech",
    "status": "stable",
    "reputation": {},
    "notes": "Specify 'voice' and 'input'; supports streaming responses."
  },
  {
    "id": "agi://service/openai/stt:v1",
    "name": "OpenAI Speech-to-Text (Whisper)",
    "endpoint": "https://api.openai.com/v1/audio/transcriptions",
    "capabilities": ["stt", "transcribe"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "multipart/form-data"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/api-reference/audio/createTranscription",
    "status": "stable",
    "reputation": {},
    "notes": "POST multipart with 'file' and 'model' (e.g., whisper-1)."
  },
  {
    "id": "agi://service/google/vision-ai:v1",
    "name": "Google Vision AI",
    "endpoint": "https://vision.googleapis.com/v1/images:annotate",
    "capabilities": ["vision", "ocr", "labels"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by project quota"},
    "docs": "https://cloud.google.com/vision/docs/reference/rest/v1/images/annotate",
    "status": "stable",
    "reputation": {},
    "notes": "Batch annotate with features list (TEXT_DETECTION, LABEL_DETECTION, etc.)."
  },
  {
    "id": "agi://service/google/speech-to-text:v1",
    "name": "Google Speech-to-Text",
    "endpoint": "https://speech.googleapis.com/v1/speech:recognize",
    "capabilities": ["stt", "transcribe"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by project quota"},
    "docs": "https://cloud.google.com/speech-to-text/docs/reference/rest/v1/speech/recognize",
    "status": "stable",
    "reputation": {},
    "notes": "Use longrunningrecognize for async/bulk jobs."
  },
  {
    "id": "agi://service/google/text-to-speech:v1",
    "name": "Google Cloud Text-to-Speech",
    "endpoint": "https://texttospeech.googleapis.com/v1/text:synthesize",
    "capabilities": ["tts", "audio"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by project quota"},
    "docs": "https://cloud.google.com/text-to-speech/docs/reference/rest/v1/text/synthesize",
    "status": "stable",
    "reputation": {},
    "notes": "Set voice.languageCode and audioConfig (e.g., MP3, LINEAR16)."
  },
  {
    "id": "agi://service/azure/speech:v1",
    "name": "Azure Cognitive Services (Speech)",
    "endpoint": "https://{region}.stt.speech.microsoft.com/speech/recognition/conversation/cognitiveservices/v1",
    "capabilities": ["stt", "tts", "speech"],
    "auth": {"method": "key", "header": "Ocp-Apim-Subscription-Key: ${AZURE_SPEECH_KEY}"},
    "headers": {"Content-Type": "audio/wav"},
    "models_param": null,
    "limits": {"rate": "by Azure tier"},
    "docs": "https://learn.microsoft.com/azure/ai-services/speech-service/rest-speech-to-text",
    "status": "stable",
    "reputation": {},
    "notes": "Separate endpoints for TTS and STT; set 'region'."
  },
  {
    "id": "agi://service/aws/polly:v1",
    "name": "AWS Polly (Text-to-Speech)",
    "endpoint": "https://polly.{region}.amazonaws.com",
    "capabilities": ["tts", "audio"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/x-amz-json-1.1", "X-Amz-Target": "Polly_20161031.SynthesizeSpeech"},
    "models_param": null,
    "limits": {"rate": "by account quota"},
    "docs": "https://docs.aws.amazon.com/polly/latest/dg/API_SynthesizeSpeech.html",
    "status": "stable",
    "reputation": {},
    "notes": "Voices/lexicons per region; output formats MP3, Ogg, PCM."
  },
  {
    "id": "agi://service/aws/transcribe:v1",
    "name": "AWS Transcribe",
    "endpoint": "https://transcribe.{region}.amazonaws.com",
    "capabilities": ["stt", "transcribe"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/x-amz-json-1.1", "X-Amz-Target": "Transcribe.StartTranscriptionJob"},
    "models_param": null,
    "limits": {"rate": "by account quota"},
    "docs": "https://docs.aws.amazon.com/transcribe/latest/APIReference/Welcome.html",
    "status": "stable",
    "reputation": {},
    "notes": "Primarily async jobs; media on S3."
  },
  {
    "id": "agi://service/aws/rekognition:v1",
    "name": "AWS Rekognition",
    "endpoint": "https://rekognition.{region}.amazonaws.com",
    "capabilities": ["vision", "image-detect"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/x-amz-json-1.1", "X-Amz-Target": "RekognitionService.DetectLabels"},
    "models_param": null,
    "limits": {"rate": "by account quota"},
    "docs": "https://docs.aws.amazon.com/rekognition/latest/APIReference/Welcome.html",
    "status": "stable",
    "reputation": {},
    "notes": "Multiple operations: DetectLabels, DetectText, etc."
  },
  {
    "id": "agi://service/assemblyai/stt:v1",
    "name": "AssemblyAI Speech-to-Text",
    "endpoint": "https://api.assemblyai.com/v2/transcribe",
    "capabilities": ["stt", "transcribe", "diarization"],
    "auth": {"method": "bearer", "header": "Authorization: ${ASSEMBLYAI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://www.assemblyai.com/docs/",
    "status": "stable",
    "reputation": {},
    "notes": "Upload then transcribe; rich features (PII redaction, sentiment)."
  },
  {
    "id": "agi://service/deepgram/stt:v1",
    "name": "Deepgram Speech-to-Text",
    "endpoint": "https://api.deepgram.com/v1/listen",
    "capabilities": ["stt", "realtime"],
    "auth": {"method": "bearer", "header": "Authorization: Token ${DEEPGRAM_API_KEY}"},
    "headers": {"Content-Type": "audio/*"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://developers.deepgram.com/reference/streaming",
    "status": "stable",
    "reputation": {},
    "notes": "Realtime via websocket; REST for prerecorded."
  },
  {
    "id": "agi://service/elevenlabs/voice:v1",
    "name": "ElevenLabs Voice AI",
    "endpoint": "https://api.elevenlabs.io/v1/text-to-speech",
    "capabilities": ["tts", "voice"],
    "auth": {"method": "key", "header": "xi-api-key: ${ELEVENLABS_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.elevenlabs.io/",
    "status": "stable",
    "reputation": {},
    "notes": "Voices addressed by voice_id path; streaming available."
  },
  {
    "id": "agi://service/stability/stable-diffusion:v1",
    "name": "Stability AI (Stable Diffusion)",
    "endpoint": "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024x1024/text-to-image",
    "capabilities": ["image-gen"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${STABILITY_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://platform.stability.ai/docs/api-reference#tag/Text-to-Image",
    "status": "stable",
    "reputation": {},
    "notes": "Multiple engines/width/height/steps options."
  },
  {
    "id": "agi://service/replicate/image-gen:v1",
    "name": "Replicate Image Generation",
    "endpoint": "https://api.replicate.com/v1/predictions",
    "capabilities": ["image-gen", "video-gen", "async_jobs"],
    "auth": {"method": "bearer", "header": "Authorization: Token ${REPLICATE_API_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "version",
    "limits": {"rate": "by plan"},
    "docs": "https://replicate.com/docs/reference/http#predictions",
    "status": "stable",
    "reputation": {},
    "notes": "Create prediction then poll or use webhooks for result."
  },
  {
    "id": "agi://service/runway/gen2:v1",
    "name": "Runway Gen-2",
    "endpoint": "https://api.runwayml.com/v1",
    "capabilities": ["video-gen", "image-gen"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${RUNWAY_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.runwayml.com/",
    "status": "stable",
    "reputation": {},
    "notes": "Jobs-based API; credits/subscription required."
  },
  {
    "id": "agi://service/clipdrop/stable-diffusion:v1",
    "name": "Clipdrop Stable Diffusion",
    "endpoint": "https://clipdrop-api.co/text-to-image/v1",
    "capabilities": ["image-gen", "enhance"],
    "auth": {"method": "key", "header": "x-api-key: ${CLIPDROP_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://clipdrop.co/apis",
    "status": "stable",
    "reputation": {},
    "notes": "Also supports background removal, relight, upscale endpoints."
  },
  {
    "id": "agi://service/removebg/image:v1",
    "name": "Remove.bg Image Background",
    "endpoint": "https://api.remove.bg/v1.0/removebg",
    "capabilities": ["image-edit"],
    "auth": {"method": "key", "header": "X-Api-Key: ${REMOVEBG_API_KEY}"},
    "headers": {"Content-Type": "application/x-www-form-urlencoded"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://www.remove.bg/api",
    "status": "stable",
    "reputation": {},
    "notes": "POST with image_url or file; returns PNG with alpha."
  },
  {
    "id": "agi://service/openai/dall-e:v1",
    "name": "OpenAI DALL·E Image Generation",
    "endpoint": "https://api.openai.com/v1/images/generations",
    "capabilities": ["image-gen", "edit"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/api-reference/images/create",
    "status": "stable",
    "reputation": {},
    "notes": "Use 'image[]' endpoints for edits/variations where available."
  },
  {
    "id": "agi://service/github/rest:v1",
    "name": "GitHub REST API",
    "endpoint": "https://api.github.com",
    "capabilities": ["code", "repos", "issues", "pulls"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GITHUB_TOKEN}"},
    "headers": {"Accept": "application/vnd.github+json", "X-GitHub-Api-Version": "2022-11-28"},
    "models_param": null,
    "limits": {"rate": "5000 requests/hour (token)"},
    "docs": "https://docs.github.com/rest",
    "status": "stable",
    "reputation": {},
    "notes": "Use conditional requests (ETag) to reduce rate usage."
  },
  {
    "id": "agi://service/github/graphql:v1",
    "name": "GitHub GraphQL API",
    "endpoint": "https://api.github.com/graphql",
    "capabilities": ["code", "repos", "graph"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GITHUB_TOKEN}"},
    "headers": {"Accept": "application/vnd.github+json"},
    "models_param": null,
    "limits": {"rate": "5000 requests/hour (token); cost-based"},
    "docs": "https://docs.github.com/graphql",
    "status": "stable",
    "reputation": {},
    "notes": "Cost-based throttling; batch queries via GraphQL."
  },
  {
    "id": "agi://service/gitlab/api:v1",
    "name": "GitLab API",
    "endpoint": "https://gitlab.com/api/v4",
    "capabilities": ["code", "repos", "ci"],
    "auth": {"method": "bearer", "header": "PRIVATE-TOKEN: ${GITLAB_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.gitlab.com/ee/api/",
    "status": "stable",
    "reputation": {},
    "notes": "Self-hosted GitLab instances expose same API base per host."
  },
  {
    "id": "agi://service/langchain/hub:v1",
    "name": "LangChain Hub",
    "endpoint": "https://api.langchain.plus",
    "capabilities": ["agents", "chains", "prompts"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${LANGCHAIN_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by subscription"},
    "docs": "https://docs.smith.langchain.com/hub",
    "status": "stable",
    "reputation": {},
    "notes": "Pull prompts/chains by ID or tag; integrates with LangSmith."
  },
  {
    "id": "agi://service/langsmith/monitor:v1",
    "name": "LangSmith",
    "endpoint": "https://api.smith.langchain.com",
    "capabilities": ["tracing", "evals", "monitoring"],
    "auth": {"method": "bearer", "header": "x-api-key: ${LANGSMITH_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by subscription"},
    "docs": "https://docs.smith.langchain.com/",
    "status": "stable",
    "reputation": {},
    "notes": "Trace runs, datasets, feedback; integrates with LangChain."
  },
  {
    "id": "agi://service/zapier/platform:v1",
    "name": "Zapier Platform",
    "endpoint": "https://nla.zapier.com/api/v1/dynamic",
    "capabilities": ["automation", "workflows", "actions"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${ZAPIER_NLA_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://nla.zapier.com/api/v1/dynamic/docs",
    "status": "stable",
    "reputation": {},
    "notes": "NLA exposes pre-authorized actions to LLM agents."
  },
  {
    "id": "agi://service/make/platform:v1",
    "name": "Make.com (Integromat)",
    "endpoint": "https://api.make.com/v2",
    "capabilities": ["automation", "workflows"],
    "auth": {"method": "bearer", "header": "Authorization: Token ${MAKE_API_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://www.make.com/en/help/api",
    "status": "stable",
    "reputation": {},
    "notes": "Scenarios = workflows; rich app connectors."
  },
  {
    "id": "agi://service/n8n/automation:v1",
    "name": "n8n Automation API",
    "endpoint": "https://api.n8n.io",
    "capabilities": ["automation", "integrations"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${N8N_API_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan/self-host"},
    "docs": "https://docs.n8n.io/",
    "status": "stable",
    "reputation": {},
    "notes": "Cloud and self-hosted; nodes orchestrate external APIs."
  },
  {
    "id": "agi://service/wolfram/alpha:v1",
    "name": "Wolfram Alpha API",
    "endpoint": "https://api.wolframalpha.com/v2/query",
    "capabilities": ["math", "knowledge", "compute"],
    "auth": {"method": "key", "query": "appid=${WOLFRAM_APPID}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://products.wolframalpha.com/api/documentation/",
    "status": "stable",
    "reputation": {},
    "notes": "Use 'output=json'; pods/subpods structure."
  },
  {
    "id": "agi://service/openai/code-interpreter:v1",
    "name": "OpenAI Code Interpreter (Python sandbox)",
    "endpoint": "https://api.openai.com/v1/chat/completions",
    "capabilities": ["sandbox", "compute", "code-exec"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${OPENAI_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": "model",
    "limits": {"rate": "varies by plan"},
    "docs": "https://platform.openai.com/docs/assistants/tools/code-interpreter",
    "status": "gated",
    "reputation": {},
    "notes": "Exposed as an Assistant tool in the platform, not a standalone public REST."
  },
  {
    "id": "agi://service/replit/api:v1",
    "name": "Replit API",
    "endpoint": "https://replit.com/data",
    "capabilities": ["code", "exec", "hosting"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${REPLIT_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.replit.com/",
    "status": "stable",
    "reputation": {},
    "notes": "Includes DB and deployments; product APIs evolve."
  },
  {
    "id": "agi://service/paperspace/gradient:v1",
    "name": "Paperspace Gradient",
    "endpoint": "https://api.paperspace.io",
    "capabilities": ["gpu", "training", "notebooks"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${PAPERSPACE_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.digitalocean.com/products/paperspace/api/",
    "status": "stable",
    "reputation": {},
    "notes": "Jobs/Pods; storage and logs endpoints available."
  },
  {
    "id": "agi://service/google/bigquery:v1",
    "name": "Google BigQuery",
    "endpoint": "https://bigquery.googleapis.com/bigquery/v2",
    "capabilities": ["data", "sql", "analytics"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "project quotas; per TB processed"},
    "docs": "https://cloud.google.com/bigquery/docs/reference/rest",
    "status": "stable",
    "reputation": {},
    "notes": "Jobs insert/query; storage write API for streaming inserts."
  },
  {
    "id": "agi://service/snowflake/sql:v1",
    "name": "Snowflake SQL API",
    "endpoint": "https://{account}.snowflakecomputing.com/api/v2/statements",
    "capabilities": ["data", "sql"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${SNOWFLAKE_OAUTH_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by warehouse credits"},
    "docs": "https://docs.snowflake.com/en/developer-guide/sql-api/index",
    "status": "stable",
    "reputation": {},
    "notes": "Async result polling; key pair auth also common."
  },
  {
    "id": "agi://service/databricks/sql:v1",
    "name": "Databricks SQL API",
    "endpoint": "https://{workspace}.databricks.com/api/2.0/sql",
    "capabilities": ["data", "sql", "lakehouse"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${DATABRICKS_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by workspace plan"},
    "docs": "https://docs.databricks.com/api/workspace/sql",
    "status": "stable",
    "reputation": {},
    "notes": "Use SQL Statement Execution or Warehouses endpoints."
  },
  {
    "id": "agi://service/kaggle/api:v1",
    "name": "Kaggle API",
    "endpoint": "https://www.kaggle.com/api/v1",
    "capabilities": ["datasets", "competitions"],
    "auth": {"method": "key", "header": "Authorization: Kaggle ${KAGGLE_USERNAME}:${KAGGLE_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by service limits"},
    "docs": "https://www.kaggle.com/docs/api",
    "status": "stable",
    "reputation": {},
    "notes": "CLI is standard; REST underpins client."
  },
  {
    "id": "agi://service/huggingface/inference:v1",
    "name": "Hugging Face Inference API",
    "endpoint": "https://api-inference.huggingface.co/models",
    "capabilities": ["nlp", "vision", "audio", "agents"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${HF_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://huggingface.co/docs/api-inference/index",
    "status": "stable",
    "reputation": {},
    "notes": "Pass model repo in path; task auto-detected or forced with headers."
  },
  {
    "id": "agi://service/google/search:v1",
    "name": "Google Custom Search API",
    "endpoint": "https://www.googleapis.com/customsearch/v1",
    "capabilities": ["search", "web"],
    "auth": {"method": "key", "query": "key=${GOOGLE_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by project quota"},
    "docs": "https://developers.google.com/custom-search/v1/overview",
    "status": "stable",
    "reputation": {},
    "notes": "Requires cx (search engine ID)."
  },
  {
    "id": "agi://service/serper/search:v1",
    "name": "Serper.dev (Google SERP)",
    "endpoint": "https://google.serper.dev/search",
    "capabilities": ["search", "web"],
    "auth": {"method": "bearer", "header": "X-API-KEY: ${SERPER_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://serper.dev/",
    "status": "stable",
    "reputation": {},
    "notes": "Lightweight Google results wrapper."
  },
  {
    "id": "agi://service/replit/api:v1",
    "name": "Replit API",
    "endpoint": "https://replit.com/data",
    "capabilities": ["code", "exec", "hosting"],
    "auth": {"method": "bearer", "headers": {"Authorization": "Bearer <token>"}},
    "models_param": null,
    "limits": {"rate": "plan dependent"},
    "docs": "https://docs.replit.com/",
    "status": "active",
    "reputation": {},
    "notes": "Used for code execution, hosting, and environment management."
  },
  {
    "id": "agi://service/paperspace/gradient:v1",
    "name": "Paperspace Gradient",
    "endpoint": "https://api.paperspace.io",
    "capabilities": ["gpu", "training", "notebooks"],
    "auth": {"method": "bearer", "headers": {"Authorization": "Bearer <API_KEY>"}},
    "models_param": null,
    "limits": {"rate": "GPU/time quota"},
    "docs": "https://docs.paperspace.com/gradient/",
    "status": "active",
    "reputation": {},
    "notes": "Provides GPU-based ML training and Jupyter notebooks."
  },
  {
    "id": "agi://service/google/bigquery:v1",
    "name": "Google BigQuery",
    "endpoint": "https://bigquery.googleapis.com/bigquery/v2",
    "capabilities": ["data", "sql", "analytics"],
    "auth": {"method": "bearer", "headers": {"Authorization": "Bearer <OAuth2>"}},
    "models_param": null,
    "limits": {"rate": "per TB processed"},
    "docs": "https://cloud.google.com/bigquery/docs/reference/rest",
    "status": "active",
    "reputation": {},
    "notes": "Fully managed data warehouse; pricing by TB scanned."
  },
  {
    "id": "agi://service/snowflake/sql:v1",
    "name": "Snowflake SQL API",
    "endpoint": "https://{account}.snowflakecomputing.com/api/v2/statements",
    "capabilities": ["data", "sql"],
    "auth": {"method": "bearer", "headers": {"Authorization": "Bearer <token>"}},
    "models_param": null,
    "limits": {"rate": "usage-based credits"},
    "docs": "https://docs.snowflake.com/en/developer-guide/sql-api/intro",
    "status": "active",
    "reputation": {},
    "notes": "SQL query execution and management via REST; async job polling required."
  },
  {
    "id": "agi://service/asana/api:v1",
    "name": "Asana API",
    "endpoint": "https://app.asana.com/api/1.0",
    "capabilities": ["tasks", "projects", "teams"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${ASANA_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per user token limits"},
    "docs": "https://developers.asana.com/docs",
    "status": "stable",
    "reputation": {},
    "notes": "Webhooks for project/task updates; rich filters."
  },
  {
    "id": "agi://service/monday/api:v1",
    "name": "Monday.com API",
    "endpoint": "https://api.monday.com/v2",
    "capabilities": ["tasks", "projects"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${MONDAY_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per account plan"},
    "docs": "https://developer.monday.com/api-reference/introduction/",
    "status": "stable",
    "reputation": {},
    "notes": "GraphQL API; send queries in POST body."
  },
  {
    "id": "agi://service/dropbox/api:v1",
    "name": "Dropbox API",
    "endpoint": "https://api.dropboxapi.com/2",
    "capabilities": ["storage", "files", "sharing"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${DROPBOX_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by app limits"},
    "docs": "https://www.dropbox.com/developers/documentation/http/documentation",
    "status": "stable",
    "reputation": {},
    "notes": "Content upload/download use content endpoints; RPC for metadata."
  },
  {
    "id": "agi://service/box/api:v1",
    "name": "Box API",
    "endpoint": "https://api.box.com/2.0",
    "capabilities": ["storage", "files", "sharing"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${BOX_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "enterprise throttles"},
    "docs": "https://developer.box.com/reference/",
    "status": "stable",
    "reputation": {},
    "notes": "JWT app auth available for server-to-server."
  },
  {
    "id": "agi://service/bing/search:v1",
    "name": "Bing Web Search API",
    "endpoint": "https://api.bing.microsoft.com/v7.0/search",
    "capabilities": ["search", "web"],
    "auth": {"method": "key", "headers": {"Ocp-Apim-Subscription-Key": "<API_KEY>"}},
    "models_param": null,
    "limits": {"rate": "subscription based"},
    "docs": "https://learn.microsoft.com/en-us/bing/search-apis/",
    "status": "active",
    "reputation": {},
    "notes": "Provides web search results from Bing index."
  },
  {
    "id": "agi://service/brave/search:v1",
    "name": "Brave Search API",
    "endpoint": "https://api.search.brave.com/res/v1/web/search",
    "capabilities": ["search", "privacy"],
    "auth": {"method": "bearer", "headers": {"Authorization": "Bearer <API_KEY>"}},
    "models_param": null,
    "limits": {"rate": "per query pricing"},
    "docs": "https://api.search.brave.com/app/documentation/web-search",
    "status": "active",
    "reputation": {},
    "notes": "Privacy-first search with JSON results."
  },
  {
    "id": "agi://service/perplexity/api:v1",
    "name": "Perplexity AI API",
    "endpoint": "https://api.perplexity.ai",
    "capabilities": ["search", "qa", "chat"],
    "auth": {"method": "bearer", "headers": {"Authorization": "Bearer <token>"}},
    "models_param": null,
    "limits": {"rate": "subscription pricing"},
    "docs": "https://docs.perplexity.ai/",
    "status": "active",
    "reputation": {},
    "notes": "Provides conversational answers and web search integration."
  },
  {
    "id": "agi://service/notion/api:v1",
    "name": "Notion API",
    "endpoint": "https://api.notion.com/v1",
    "capabilities": ["notes", "databases", "tasks"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${NOTION_TOKEN}"},
    "headers": {"Notion-Version": "2022-06-28", "Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "standard Notion rate limits; see docs"},
    "docs": "https://developers.notion.com/reference/intro",
    "status": "stable",
    "reputation": {},
    "notes": "Use a single integration token; share pages/databases with it."
  },
  {
    "id": "agi://service/slack/api:v1",
    "name": "Slack API",
    "endpoint": "https://slack.com/api",
    "capabilities": ["chat", "workspace", "automation"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${SLACK_BOT_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per-method throttles"},
    "docs": "https://api.slack.com/web",
    "status": "stable",
    "reputation": {},
    "notes": "Bot/user tokens with scopes; Events/RTM/Socket Mode optional."
  },
  {
    "id": "agi://service/microsoft/graph:v1",
    "name": "Microsoft Graph API",
    "endpoint": "https://graph.microsoft.com/v1.0",
    "capabilities": ["office", "mail", "calendar", "tasks"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${MS_GRAPH_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "service-specific throttling"},
    "docs": "https://learn.microsoft.com/graph/overview",
    "status": "stable",
    "reputation": {},
    "notes": "Requires Azure AD app registration and delegated/app scopes."
  },
  {
    "id": "agi://service/google/workspace:v1",
    "name": "Google Workspace APIs",
    "endpoint": "https://www.googleapis.com",
    "capabilities": ["gmail", "calendar", "drive"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_OAUTH_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per-product quotas"},
    "docs": "https://developers.google.com/workspace",
    "status": "stable",
    "reputation": {},
    "notes": "Enable specific APIs and scopes per product; SA or OAuth."
  },
  {
    "id": "agi://service/evernote/api:v1",
    "name": "Evernote API",
    "endpoint": "https://api.evernote.com/v1",
    "capabilities": ["notes", "storage"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${EVERNOTE_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://dev.evernote.com/doc/",
    "status": "stable",
    "reputation": {},
    "notes": "Token scopes vary; some legacy endpoints still exist."
  },
  {
    "id": "agi://service/airtable/api:v1",
    "name": "Airtable API",
    "endpoint": "https://api.airtable.com/v0",
    "capabilities": ["databases", "tasks", "storage"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${AIRTABLE_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per-base rate limits"},
    "docs": "https://airtable.com/developers/web/api/introduction",
    "status": "stable",
    "reputation": {},
    "notes": "Base and table are in the path; metadata API available."
  },
  {
    "id": "agi://service/confluence/api:v1",
    "name": "Atlassian Confluence API",
    "endpoint": "https://{subdomain}.atlassian.net/wiki/rest/api",
    "capabilities": ["docs", "wiki", "tasks"],
    "auth": {"method": "basic", "header": "Authorization: Basic base64(${EMAIL}:${API_TOKEN})"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by cloud plan"},
    "docs": "https://developer.atlassian.com/cloud/confluence/rest/",
    "status": "stable",
    "reputation": {},
    "notes": "Most Atlassian Cloud uses email+API token via Basic auth."
  },
  {
    "id": "agi://service/jira/api:v1",
    "name": "Atlassian Jira API",
    "endpoint": "https://{subdomain}.atlassian.net/rest/api/3",
    "capabilities": ["tasks", "issues", "project-management"],
    "auth": {"method": "basic", "header": "Authorization: Basic base64(${EMAIL}:${API_TOKEN})"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by cloud plan"},
    "docs": "https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/",
    "status": "stable",
    "reputation": {},
    "notes": "Use JQL for search; webhooks available."
  },
  {
    "id": "agi://service/trello/api:v1",
    "name": "Trello API",
    "endpoint": "https://api.trello.com/1",
    "capabilities": ["tasks", "boards", "cards"],
    "auth": {"method": "key+token", "query": "key=${TRELLO_KEY}&token=${TRELLO_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per key limits"},
    "docs": "https://developer.atlassian.com/cloud/trello/rest/",
    "status": "stable",
    "reputation": {},
    "notes": "OAuth 1.0a also supported; query auth is simplest."
  },
  {
    "id": "agi://service/aws/ec2:v1",
    "name": "AWS EC2",
    "endpoint": "https://ec2.{region}.amazonaws.com",
    "capabilities": ["compute", "infra"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/x-www-form-urlencoded"},
    "models_param": null,
    "limits": {"rate": "by account/quota"},
    "docs": "https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Welcome.html",
    "status": "stable",
    "reputation": {},
    "notes": "Query API; operations via Action param (e.g., RunInstances)."
  },
  {
    "id": "agi://service/aws/s3:v1",
    "name": "AWS S3",
    "endpoint": "https://s3.{region}.amazonaws.com",
    "capabilities": ["storage", "files"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/xml"},
    "models_param": null,
    "limits": {"rate": "by account; request-based pricing"},
    "docs": "https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html",
    "status": "stable",
    "reputation": {},
    "notes": "Supports virtual-hosted-style buckets; presigned URLs and multipart upload."
  },
  {
    "id": "agi://service/aws/lambda:v1",
    "name": "AWS Lambda",
    "endpoint": "https://lambda.{region}.amazonaws.com",
    "capabilities": ["serverless", "compute"],
    "auth": {"method": "aws_sigv4"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by account; concurrency limits"},
    "docs": "https://docs.aws.amazon.com/lambda/latest/dg/API_Reference.html",
    "status": "stable",
    "reputation": {},
    "notes": "Invoke via /2015-03-31/functions/{name}/invocations; payload JSON."
  },
  {
    "id": "agi://service/gcp/compute:v1",
    "name": "Google Compute Engine",
    "endpoint": "https://compute.googleapis.com/compute/v1",
    "capabilities": ["compute", "infra"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per-project quotas"},
    "docs": "https://cloud.google.com/compute/docs/reference/rest/v1",
    "status": "stable",
    "reputation": {},
    "notes": "Zonal/Regional resources; long-running operations need polling."
  },
  {
    "id": "agi://service/gcp/storage:v1",
    "name": "Google Cloud Storage",
    "endpoint": "https://storage.googleapis.com/storage/v1",
    "capabilities": ["storage", "files"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per-project quotas"},
    "docs": "https://cloud.google.com/storage/docs/json_api/v1",
    "status": "stable",
    "reputation": {},
    "notes": "Use JSON API for metadata; XML API also exists; signed URLs supported."
  },
  {
    "id": "agi://service/gcp/functions:v1",
    "name": "Google Cloud Functions",
    "endpoint": "https://cloudfunctions.googleapis.com/v1",
    "capabilities": ["serverless", "compute"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GCP_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per-project quotas"},
    "docs": "https://cloud.google.com/functions/docs/reference/rest",
    "status": "stable",
    "reputation": {},
    "notes": "Deploy/invoke via REST; gen2 functions run on Cloud Run."
  },
  {
    "id": "agi://service/azure/vm:v1",
    "name": "Azure Virtual Machines",
    "endpoint": "https://management.azure.com/subscriptions/{sub}/providers/Microsoft.Compute/virtualMachines",
    "capabilities": ["compute", "infra"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${AZURE_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by subscription; RP throttles"},
    "docs": "https://learn.microsoft.com/rest/api/compute/virtual-machines",
    "status": "stable",
    "reputation": {},
    "notes": "Management plane; requires api-version query param."
  },
  {
    "id": "agi://service/azure/storage:v1",
    "name": "Azure Blob Storage",
    "endpoint": "https://{account}.blob.core.windows.net",
    "capabilities": ["storage", "files"],
    "auth": {"method": "bearer", "alt_methods": ["shared_key", "sas"]},
    "headers": {"x-ms-version": "2023-11-03"},
    "models_param": null,
    "limits": {"rate": "by account"},
    "docs": "https://learn.microsoft.com/rest/api/storageservices/blob-service-rest-api",
    "status": "stable",
    "reputation": {},
    "notes": "Supports AAD bearer, Shared Key, or SAS auth; operations via container/blob paths."
  },
  {
    "id": "agi://service/azure/functions:v1",
    "name": "Azure Functions",
    "endpoint": "https://management.azure.com/subscriptions/{sub}/providers/Microsoft.Web/sites",
    "capabilities": ["serverless", "compute"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${AZURE_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by subscription"},
    "docs": "https://learn.microsoft.com/rest/api/appservice/web-apps",
    "status": "stable",
    "reputation": {},
    "notes": "Management API for deploy/config; function triggers may use function keys for invoke."
  },
  {
    "id": "agi://service/cloudflare/workers:v1",
    "name": "Cloudflare Workers",
    "endpoint": "https://api.cloudflare.com/client/v4/accounts/{id}/workers/scripts",
    "capabilities": ["edge", "serverless"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${CF_API_TOKEN}"},
    "headers": {"Content-Type": "application/javascript"},
    "models_param": null,
    "limits": {"rate": "per account plan"},
    "docs": "https://developers.cloudflare.com/workers/api/",
    "status": "stable",
    "reputation": {},
    "notes": "Deploy scripts; KV/Durable Objects bindings via metadata."
  },
  {
    "id": "agi://service/cloudflare/r2:v1",
    "name": "Cloudflare R2 Storage",
    "endpoint": "https://api.cloudflare.com/client/v4/accounts/{id}/r2",
    "capabilities": ["storage", "files"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${CF_API_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per account plan"},
    "docs": "https://developers.cloudflare.com/r2/api/",
    "status": "stable",
    "reputation": {},
    "notes": "S3-compatible access keys for data plane; REST for management."
  },
  {
    "id": "agi://service/vercel/deploy:v1",
    "name": "Vercel Deploy API",
    "endpoint": "https://api.vercel.com/v13/deployments",
    "capabilities": ["deploy", "edge"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${VERCEL_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://vercel.com/docs/rest-api",
    "status": "stable",
    "reputation": {},
    "notes": "POST deployment with files or Git integration; inspect build logs via API."
  },
  {
    "id": "agi://service/netlify/deploy:v1",
    "name": "Netlify Deploy API",
    "endpoint": "https://api.netlify.com/api/v1/sites",
    "capabilities": ["deploy", "hosting"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${NETLIFY_TOKEN}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "by plan"},
    "docs": "https://docs.netlify.com/api/get-started/",
    "status": "stable",
    "reputation": {},
    "notes": "Create site, trigger builds, manage DNS/functions via API."
  },
  {
    "id": "agi://service/stripe/api:v1",
    "name": "Stripe API",
    "endpoint": "https://api.stripe.com/v1",
    "capabilities": ["payments", "billing"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${STRIPE_SECRET_KEY}"},
    "headers": {"Idempotency-Key": "${optional_uuid}"},
    "models_param": null,
    "limits": {"rate": "per key; burstable"},
    "docs": "https://stripe.com/docs/api",
    "status": "stable",
    "reputation": {},
    "notes": "Webhook signing; use test keys in sandbox; strong idempotency support."
  },
  {
    "id": "agi://service/paypal/api:v1",
    "name": "PayPal REST API",
    "endpoint": "https://api-m.paypal.com",
    "capabilities": ["payments", "checkout"],
    "auth": {"method": "bearer", "notes": "Obtain via POST /v1/oauth2/token with Basic <client:secret>"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per account"},
    "docs": "https://developer.paypal.com/api/rest/",
    "status": "stable",
    "reputation": {},
    "notes": "Use sandbox domain api-m.sandbox.paypal.com for testing."
  },
  {
    "id": "agi://service/twilio/api:v1",
    "name": "Twilio API",
    "endpoint": "https://api.twilio.com/2010-04-01",
    "capabilities": ["sms", "voice", "video"],
    "auth": {"method": "basic", "header": "Authorization: Basic base64(${ACCOUNT_SID}:${AUTH_TOKEN})"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "per subaccount"},
    "docs": "https://www.twilio.com/docs/usage/api",
    "status": "stable",
    "reputation": {},
    "notes": "Programmable SMS/Voice/WhatsApp; webhooks deliver events."
  },
  {
    "id": "agi://service/sendgrid/api:v1",
    "name": "SendGrid API",
    "endpoint": "https://api.sendgrid.com/v3/mail/send",
    "capabilities": ["email", "notify"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${SENDGRID_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per plan; daily send limits"},
    "docs": "https://docs.sendgrid.com/api-reference/mail-send/mail-send",
    "status": "stable",
    "reputation": {},
    "notes": "Use dynamic templates; handle bounces via Event Webhook."
  },
  {
    "id": "agi://service/datadog/api:v1",
    "name": "Datadog API",
    "endpoint": "https://api.datadoghq.com/api/v1",
    "capabilities": ["monitoring", "metrics", "logs"],
    "auth": {"method": "key_pair", "headers": {"DD-API-KEY": "${DD_API_KEY}", "DD-APPLICATION-KEY": "${DD_APP_KEY}"}},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per org; endpoint-specific"},
    "docs": "https://docs.datadoghq.com/api/latest/",
    "status": "stable",
    "reputation": {},
    "notes": "US/EU site domains differ (datadoghq.eu)."
  },
  {
    "id": "agi://service/grafana/api:v1",
    "name": "Grafana API",
    "endpoint": "https://grafana.com/api",
    "capabilities": ["dashboards", "metrics"],
    "auth": {"method": "bearer", "header": "Authorization: Bearer ${GRAFANA_TOKEN}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "by cloud plan"},
    "docs": "https://grafana.com/docs/grafana/latest/developers/http_api/",
    "status": "stable",
    "reputation": {},
    "notes": "Self-hosted instances expose similar endpoints per host."
  },
  {
    "id": "agi://service/prometheus/api:v1",
    "name": "Prometheus API",
    "endpoint": "http://{host}:9090/api/v1",
    "capabilities": ["monitoring", "metrics"],
    "auth": {"method": "none"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "self-hosted"},
    "docs": "https://prometheus.io/docs/prometheus/latest/querying/api/",
    "status": "stable",
    "reputation": {},
    "notes": "Endpoints: /query, /query_range, /series, /labels, etc."
  },
  {
    "id": "agi://service/google/translate:v1",
    "name": "Google Cloud Translation API",
    "endpoint": "https://translation.googleapis.com/language/translate/v2",
    "capabilities": ["translate", "multilingual"],
    "auth": {"method": "key_or_bearer", "header": "Authorization: Bearer ${GCP_TOKEN}", "query": "key=${GOOGLE_API_KEY}"},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per project quota; per-character billing"},
    "docs": "https://cloud.google.com/translate/docs/reference/rest",
    "status": "stable",
    "reputation": {},
    "notes": "V3 Translation API (Advanced) also available with glossaries."
  },
  {
    "id": "agi://service/microsoft/translator:v1",
    "name": "Microsoft Translator Text API",
    "endpoint": "https://api.cognitive.microsofttranslator.com/translate",
    "capabilities": ["translate", "multilingual"],
    "auth": {"method": "key", "headers": {"Ocp-Apim-Subscription-Key": "${AZURE_TRANSLATOR_KEY}", "Ocp-Apim-Subscription-Region": "${AZURE_REGION}"}},
    "headers": {"Content-Type": "application/json"},
    "models_param": null,
    "limits": {"rate": "per resource tier; per-character billing"},
    "docs": "https://learn.microsoft.com/azure/ai-services/translator/reference/v3-0-translate",
    "status": "stable",
    "reputation": {},
    "notes": "Pass 'to' language array; supports custom glossaries and transliteration."
  },
  {
    "id": "agi://service/deepl/translate:v1",
    "name": "DeepL API",
    "endpoint": "https://api.deepl.com/v2/translate",
    "capabilities": ["translate", "multilingual"],
    "auth": {"method": "key", "query": "auth_key=${DEEPL_API_KEY}"},
    "headers": {"Content-Type": "application/x-www-form-urlencoded"},
    "models_param": null,
    "limits": {"rate": "per account; per-character billing"},
    "docs": "https://www.deepl.com/docs-api",
    "status": "stable",
    "reputation": {},
    "notes": "Free (api-free.deepl.com) and Pro endpoints differ."
  },
  {
    "id": "agi://service/openweather/api:v1",
    "name": "OpenWeatherMap API",
    "endpoint": "https://api.openweathermap.org/data/2.5",
    "capabilities": ["weather", "forecast"],
    "auth": {"method": "key", "query": "appid=${OPENWEATHER_API_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "tiered; free limited"},
    "docs": "https://openweathermap.org/api",
    "status": "stable",
    "reputation": {},
    "notes": "Endpoints include /weather, /forecast, /onecall (3.0)."
  },
  {
    "id": "agi://service/weatherapi/api:v1",
    "name": "WeatherAPI",
    "endpoint": "https://api.weatherapi.com/v1",
    "capabilities": ["weather", "forecast"],
    "auth": {"method": "key", "query": "key=${WEATHERAPI_KEY}"},
    "headers": {"Accept": "application/json"},
    "models_param": null,
    "limits": {"rate": "free+paid tiers"},
    "docs": "https://www.weatherapi.com/docs/",
    "status": "stable",
    "reputation": {},
    "notes": "Common endpoints: /current.json, /forecast.json."
  },
  {
    "id": "agi://service/groq/chat-completions:v1",
    "name": "Groq Chat Completions (OpenAI-compatible)",
    "endpoint": "https://api.groq.com/openai/v1/chat/completions",
    "capabilities": ["chat", "stream", "openai_compatible"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${GROQ_API_KEY}"},
    "headers": {
      "Content-Type": "application/json"},
    "models_param": "model",
    "limits": {
      "rate": "by plan"},
    "docs": "https://console.groq.com/docs/api-reference",
    "status": "stable",
    "reputation": {
      "ecosystem": "fast inference"
    },
    "notes": "Set baseURL to https://api.groq.com/openai/v1 for OpenAI SDKs."
  },
  {
    "id": "agi://service/fireworks/chat-completions:v1",
    "name": "Fireworks Chat Completions",
    "endpoint": "https://api.fireworks.ai/inference/v1/chat/completions",
    "capabilities": ["chat", "tools", "stream", "embeddings", "rerank"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${FIREWORKS_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": "model",
    "limits": {
      "rate": "by plan"
    },
    "docs": "https://docs.fireworks.ai/api-reference/post-chatcompletions",
    "status": "stable",
    "reputation": {
      "ecosystem": "multi-model host"
    },
    "notes": "Also supports embeddings and audio transcription endpoints."
  },
  {
    "id": "agi://service/cerebras/chat-completions:v1",
    "name": "Cerebras Inference (Chat Completions)",
    "endpoint": "https://api.cerebras.ai/v1/chat/completions",
    "capabilities": ["chat", "structured_outputs", "stream"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${CEREBRAS_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": "model",
    "limits": {
      "rate": "by plan"
    },
    "docs": "https://inference-docs.cerebras.ai/api-reference/chat-completions",
    "status": "stable",
    "reputation": {},
    "notes": "OpenAI-style payload; supports JSON schema outputs (beta)."
  },
  {
    "id": "agi://service/openai/embeddings:v1",
    "name": "OpenAI Embeddings",
    "endpoint": "https://api.openai.com/v1/embeddings",
    "capabilities": ["embeddings"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${OPENAI_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": "model",
    "limits": {
      "rate": "varies by plan"
    },
    "docs": "https://platform.openai.com/docs/api-reference/embeddings",
    "status": "stable",
    "reputation": {},
    "notes": "Returns vectors for search, clustering, and RAG pipelines."
  },
  {
    "id": "agi://service/cohere/rerank:v2",
    "name": "Cohere Rerank",
    "endpoint": "https://api.cohere.ai/v2/rerank",
    "capabilities": ["rerank", "semantic_search"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${COHERE_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": "model",
    "limits": {
      "rate": "by plan"
    },
    "docs": "https://docs.cohere.com/reference/rerank",
    "status": "stable",
    "reputation": {},
    "notes": "Given a query and documents, returns ordered relevance scores."
  },
  {
    "id": "agi://service/voyage/embeddings:v1",
    "name": "Voyage AI Embeddings",
    "endpoint": "https://api.voyageai.com/v1/embeddings",
    "capabilities": ["embeddings"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${VOYAGE_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": "model",
    "limits": {
      "rate": "by plan"
    },
    "docs": "https://docs.voyageai.com/reference/embeddings-api",
    "status": "stable",
    "reputation": {},
    "notes": "Text embedding endpoint for RAG and search."
  },
  {
    "id": "agi://service/jina/embeddings:v1",
    "name": "Jina AI Embeddings",
    "endpoint": "https://api.jina.ai/v1/embeddings",
    "capabilities": ["embeddings", "multilingual"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${JINA_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": "model",
    "limits": {
      "rate": "by plan"
    },
    "docs": "https://jina.ai/embeddings/",
    "status": "stable",
    "reputation": {},
    "notes": "Supports text and CLIP-style embeddings; high-dimension vectors."
  },
  {
    "id": "agi://service/cloudflare/workers-ai-run:v1",
    "name": "Cloudflare Workers AI (Run Model)",
    "endpoint": "https://api.cloudflare.com/client/v4/accounts/{account_id}/ai/run/{model}",
    "capabilities": ["chat", "vision", "audio", "inference", "serverless"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${CF_API_TOKEN}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": null,
    "limits": {
      "rate": "by account plan"
    },
    "docs": "https://developers.cloudflare.com/api/resources/ai/methods/run/",
    "status": "stable",
    "reputation": {
      "ecosystem": "edge"
    },
    "notes": "Model names prefixed like '@cf/meta/llama-3-8b-instruct'."
  },
  {
    "id": "agi://service/google/places-textsearch:v1",
    "name": "Google Places API (Text Search, New)",
    "endpoint": "https://places.googleapis.com/v1/places:searchText",
    "capabilities": ["search", "places", "local"],
    "auth": {
      "method": "key_or_bearer",
      "header": "X-Goog-Api-Key: ${GOOGLE_API_KEY}"
    },
    "headers": {
      "Content-Type": "application/json",
      "X-Goog-FieldMask": "${FIELD_MASK}"
    },
    "models_param": null,
    "limits": {
      "rate": "by project quota"
    },
    "docs": "https://developers.google.com/maps/documentation/places/web-service/text-search",
    "status": "stable",
    "reputation": {},
    "notes": "POST JSON with 'textQuery'; set FieldMask to control returned fields."
  },
  {
    "id": "agi://service/linear/graphql:v1",
    "name": "Linear GraphQL API",
    "endpoint": "https://api.linear.app/graphql",
    "capabilities": ["issues", "projects", "graph", "webhooks"],
    "auth": {
      "method": "bearer",
      "header": "Authorization: Bearer ${LINEAR_TOKEN}"
    },
    "headers": {
      "Content-Type": "application/json"
    },
    "models_param": null,
    "limits": {
      "rate": "by workspace plan"
    },
    "docs": "https://linear.app/developers/graphql",
    "status": "stable",
    "reputation": {},
    "notes": "GraphQL schema for issues/projects; supports OAuth2 or personal API keys."
  },
  {
    "id": "agi://service/publicapis/catalog:v1",
    "name": "Public APIs Catalog",
    "endpoint": "https://api.publicapis.org/entries",
    "capabilities": ["discovery", "metadata", "filtering"],
    "auth": { "method": "none" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "public, limited by host" },
    "docs": "https://api.publicapis.org/",
    "status": "stable",
    "reputation": { "ecosystem": "widely used directory" },
    "notes": "Allows filtering by category, HTTPS, auth type, etc."
  },
  {
    "id": "agi://service/ipify/identify:v1",
    "name": "IPify – Public IP Lookup",
    "endpoint": "https://api.ipify.org?format=json",
    "capabilities": ["network", "identity"],
    "auth": { "method": "none" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "free tier limits" },
    "docs": "https://www.ipify.org/",
    "status": "stable",
    "reputation": { "simplicity": "lightweight, reliable" },
    "notes": "Returns your public IPv4/IPv6 address."
  },
  {
    "id": "agi://service/cat-fact/random:v1",
    "name": "Cat Facts API",
    "endpoint": "https://cat-fact.herokuapp.com/facts/random",
    "capabilities": ["fun", "humor", "random"],
    "auth": { "method": "none" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "public" },
    "docs": "https://github.com/alexwohlbruck/cat-facts",
    "status": "stable",
    "reputation": { "community": "often used in demos" },
    "notes": "Optional param 'amount' for number of facts."
  },
  {
    "id": "agi://service/genderize/predict:v1",
    "name": "Genderize API",
    "endpoint": "https://api.genderize.io",
    "capabilities": ["demographic", "prediction"],
    "auth": { "method": "none" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "1000 requests/day (free)" },
    "docs": "https://genderize.io/",
    "status": "stable",
    "reputation": { "utility": "name-based gender prediction" },
    "notes": "Query by ?name=<string>; supports multiple names."
  },
  {
    "id": "agi://service/nationalize/predict:v1",
    "name": "Nationalize API",
    "endpoint": "https://api.nationalize.io",
    "capabilities": ["demographic", "prediction"],
    "auth": { "method": "none" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "free tier limits" },
    "docs": "https://nationalize.io/",
    "status": "stable",
    "reputation": { "utility": "name → country probability" },
    "notes": "Query by ?name=<string>."
  },
  {
    "id": "agi://service/openweathermap/weather:v1",
    "name": "OpenWeatherMap Current Weather",
    "endpoint": "https://api.openweathermap.org/data/2.5/weather",
    "capabilities": ["weather", "forecast"],
    "auth": { "method": "key", "query": "appid=${OPENWEATHER_API_KEY}" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "per API plan" },
    "docs": "https://openweathermap.org/current",
    "status": "stable",
    "reputation": { "domain": "weather data" },
    "notes": "Supports location by city name, lat/lon, zip code."
  },
  {
    "id": "agi://service/crossref/metadata:v1",
    "name": "Crossref Metadata API",
    "endpoint": "https://api.crossref.org/works",
    "capabilities": ["scholarly", "metadata", "search"],
    "auth": { "method": "none" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "polite pool (~50 r/s with mailto UA)" },
    "docs": "https://www.crossref.org/documentation/retrieve-metadata/rest-api/",
    "status": "stable",
    "reputation": { "domain": "academic metadata" },
    "notes": "Use query parameters like ?query.title, ?filter=..."
  },
  {
    "id": "agi://service/semanticscholar/graph:v1",
    "name": "Semantic Scholar Graph API",
    "endpoint": "https://api.semanticscholar.org/graph/v1",
    "capabilities": ["papers", "citation", "graph"],
    "auth": { "method": "key", "header": "x-api-key: ${S2_API_KEY}" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "by plan" },
    "docs": "https://api.semanticscholar.org/api-docs/graph",
    "status": "stable",
    "reputation": { "domain": "research" },
    "notes": "Endpoints like /paper/{id}, /author/{id}, /paper/search"
  },
  {
    "id": "agi://service/replicate/image-predictions:v1",
    "name": "Replicate Image Generation",
    "endpoint": "https://api.replicate.com/v1/predictions",
    "capabilities": ["image-gen", "async_jobs", "webhooks"],
    "auth": { "method": "bearer", "header": "Authorization: Token ${REPLICATE_API_TOKEN}" },
    "headers": { "Content-Type": "application/json" },
    "models_param": "version",
    "limits": { "rate": "by plan" },
    "docs": "https://replicate.com/docs/reference/http#predictions",
    "status": "stable",
    "reputation": { "domain": "image generation" },
    "notes": "Create a prediction then poll or use webhooks."
  },
  {
    "id": "agi://service/wolframalpha/compute:v1",
    "name": "Wolfram Alpha API",
    "endpoint": "https://api.wolframalpha.com/v2/query",
    "capabilities": ["computation", "knowledge", "querying"],
    "auth": { "method": "key", "query": "appid=${WOLFRAM_APPID}" },
    "headers": { "Accept": "application/json" },
    "models_param": null,
    "limits": { "rate": "per plan" },
    "docs": "https://products.wolframalpha.com/api/documentation/",
    "status": "stable",
    "reputation": { "domain": "knowledge" },
    "notes": "Use output=json and input=<expression> parameters."
  }
]


